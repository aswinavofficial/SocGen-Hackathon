// Generated by CoffeeScript 1.7.1
(function() {
  var FieldParser, SwiftParser, block1Parser, block2Parser, finParser, fs, main, mtParser;

  fs = require('fs');

  finParser = require("./finParser.js");

  mtParser = require("./mtParser.js");

  block1Parser = require('./block1Parser');

  block2Parser = require('./block2Parser');

  FieldParser = require('./FieldRegexpFactory').FieldParser;

  SwiftParser = (function() {
    function SwiftParser(fieldPatterns) {
      this.fieldPatterns = fieldPatterns;
      if (fieldPatterns == null) {
        this.fieldPatterns = JSON.parse(fs.readFileSync(__dirname + '/metadata/patterns.json'));
      }
      this.fieldParser = new FieldParser(this.fieldPatterns);
    }

    SwiftParser.prototype.process = function(swiftMessage) {
      var ast, field, fieldCode, parsedField, _i, _len, _ref, _ref1;
      ast = finParser.parse(swiftMessage);
      ast.block1 = block1Parser.parse(ast.block1.content[0]);
      ast.block2 = block2Parser.parse(ast.block2.content[0]);
      ast.block4.fields = mtParser.parse(ast.block4.content[0]);
      _ref = ast.block4.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        fieldCode = field.type + ((_ref1 = field.option) != null ? _ref1 : "");
        parsedField = this.fieldParser.parse(fieldCode, field.fieldValue);
        field.ast = parsedField;
      }
      return ast;
    };

    SwiftParser.prototype.parse = function(swiftMessage, callback) {
      var ast, e;
      try {
        ast = this.process(swiftMessage);
        return callback(null, ast);
      } catch (_error) {
        e = _error;
        return callback(e, null);
      }
    };

    return SwiftParser;

  })();

  module.exports.SwiftParser = SwiftParser;

  main = function() {
    var filename;
    if (process.argv.length !== 3) {
      console.log("Usage: node swiftParser <swift file>");
      return;
    }
    filename = process.argv[2];
    return fs.readFile(filename, "ASCII", function(err, content) {
      var parser;
      if ((err != null)) {
        throw err;
      }
      parser = new SwiftParser();
      return parser.parse(content, function(err, ast) {
        if ((err != null)) {
          throw err;
        }
        return console.log(JSON.stringify(ast, null, 2));
      });
    });
  };

  if (require.main === module) {
    main();
  }

}).call(this);

//# sourceMappingURL=swiftParser.map
